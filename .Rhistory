tabItems(
tabItem(tabName="dashboard",
fluidRow(
box(style="height : 100vh; width : 100%; display : flex; justify-content : center;align-items : center;",solidHeader = TRUE,id="notif", width=12, style="backgroud: #ccff90", h1("Upload a file"))),
fluidRow(
infoBoxOutput("data_rows"),
infoBoxOutput("data_columns")),
fluidRow(
column(style='padding:0px;',offset=0,width=4,div(id="hidden",
tabBox(width=12,height=box_height,
tabPanel("Handle columns",
uiOutput("delete_col"),
uiOutput("delete"),
uiOutput("merge_col"),
uiOutput("merge_col_name"),
uiOutput("merge")),
tabPanel("Handle rows",
uiOutput("delete_row"),
uiOutput("delete_r")),
tabPanel("Convert types",
uiOutput("col_to_convert"),
uiOutput("convert_type"),
uiOutput("convert_val")),
tabPanel("Encode variables",
uiOutput("col_to_encode"),
uiOutput("val_encode")),
tabPanel("More options",
uiOutput("na"),
uiOutput("reset"))))),
column(style='padding:0px;',offset=0,width=8,box(style="overflow-x : scroll;overflow-y : scroll;",height=box_height,solidHeader = TRUE,id="data_table",width=12,
column(width=12,DT::dataTableOutput("display_file"))))
),
fluidRow(
column(style='padding:0px;',width=6,box(solidHeader = TRUE,title="details",id="str_table",width=12,
column(width=12,verbatimTextOutput("str")))),
column(style='padding:0px;',width=6,box(solidHeader = TRUE,title="describe()",id="desc_table",width=12,
column(width=12,verbatimTextOutput("desc"))))),
fluidRow(
box(solidHeader = TRUE,title="Show unique",id="unique_",width=12,
column(width=12,uiOutput("show_unique")),
column(width=12,verbatimTextOutput("unique"))))
),
tabItem(tabName="analyze",
fluidRow(
h1("Analyze")),
fluidRow(
column(style='padding:0px;',width=4,box(solidHeader=TRUE,width=12,
uiOutput("select_plot"),
hidden(div(id="x_value",uiOutput("select_x"))),
hidden(div(id="y_value",uiOutput("select_y"))),
hidden(div(id="dodge",uiOutput("dodge"))),
hidden(div(id="color",uiOutput("select_color"))),
uiOutput("plot_graph"))),
column(style='padding:0px;',width=8, box(solidHeader = TRUE,width=12,
plotlyOutput("graphic")
)))),
tabItem(tabName="join",h1("Join file")),
tabItem(tabName="ml",h1("ML models"))
)
)
))
runApp('Q:/R/pre_process_R')
mtcars <- datasets(mtcars)
library(datasets)
mtcars <- datasets(mtcars)
mtcars <- mtcars
View(mtcars)
runApp('Q:/R/pre_process_R')
library(mltools)
View(file)
one_hot <- file[,"combined"]
one_hot <- one_hot(file[,"combined"])
one_hot(file[,"combined"])
mltools::one_hot(file[,"combined"])
mltools::one_hot(as.factor(file[,"combined"]))
dd <- dist(scale(mtcars), method = "euclidean")
hc <- hclust(dd, method = "ward.D2")
plot(hc)
runApp('Q:/R/pre_process_R')
mtcars <- mtcars
dd <- dist(scale(mtcars), method = "euclidean")
hc <- hclust(dd, method = "ward.D2")
mtcars <- mtcars
dd <- dist(scale(mtcars), method = "euclidean")
hc <- hclust(dd, method = "ward.D2")
plot(hc)
mtcars <- mtcars
dd <- dist(scale(mtcars), method = "euclidean")
hc <- hclust(dd, method = "ward.D2")
plot(hc)
runApp('Q:/R/pre_process_R')
library(ggcorrplot)
runApp('Q:/R/pre_process_R')
mtcars <- mtcars
dd <- dist(scale(mtcars), method = "euclidean")
hc <- hclust(dd, method = "ward.D2")
plot_dendro(hc)
mtcars <- mtcars
dd <- dist(scale(mtcars), method = "euclidean")
hc <- hclust(dd, method = "ward.D2")
plotly::plot_dendro(hc)
install.packages("dendextend")
mtcars <- mtcars
dd <- dist(scale(mtcars), method = "euclidean")
hc <- hclust(dd, method = "ward.D2")
plotly::plot_dendro(hc)
plot_dendro(hc)
mtcars <- mtcars
dd <- dist(scale(mtcars), method = "euclidean")
hc <- hclust(dd, method = "ward.D2")
plot_dendro(hc)
mtcars <- mtcars
dd <- dist(scale(mtcars), method = "euclidean")
hc <- hclust(dd, method = "ward.D2")
plot(hc)
plotly(plot(hc))
ggd1 <- as.ggdend(hc)
shiny::runApp('Q:/R/pre_process_R')
View(file)
file <- read.csv("Q:/R/datasets/do not use this/cwurData.csv",header=TRUW)
file <- read.csv("Q:/R/datasets/do not use this/cwurData.csv",header=TRUE)
library(caret)
dummy <- dummyVars(" ~ .",data=file$institution)
newdata <- data.frame(predict(dummy,newdata=file$institution))
dummy
newdata <- data.frame(predict(dummy,newdata=data))
library(mltools)
newdata <- one_hot(as.data.table(file$institution))
conflicts()
newdata <- one_hot(as.data.table(file$institution))
dummy <- dummyVars(" ~ .", data=data)
dummy <- dummyVars(" ~ .", data=data)
dummy <- dummyVars(" ~ .", data=file)
newdata <- data.frame(predict(dummy, newdata = file))
View(newdata)
a <- as.data.frame(file$institution)
View(a)
dummy <- dummyVars(" ~ .", data=a)
newdata <- data.frame(predict(dummy, newdata = a))
View(newdata)
View(a)
result[,input$col_to_convert] <- as.character(result[,input$col_to_convert])
dummy <- dummyVars(" ~ .", data=a)
b <- data.frame(predict(dummy, newdata = a))
View(b)
vec <- c(1:15)
dummy <- dummyVars(" ~~ .",data=vec)
vec_enc <- data.frame(predict(dummy, newdata = vec))
vec
vec <- as.data.frame(vec)
vec
dummy <- dummyVars(" ~~ .",data=vec)
vec_enc <- data.frame(predict(dummy, newdata = vec))
View(vec_enc)
dummy <- dummyVars(" ~ .",data=vec)
vec_enc <- data.frame(predict(dummy, newdata = vec))
View(vec_enc)
vec <- as.data.frame("a","b","c")
vec <- as.data.frame(c("a","b","c"))
View(vec)
dummy <- dummyVars(" ~ .",data=vec)
vec_enc <- data.frame(predict(dummy, newdata = vec))
View(vec_enc)
shiny::runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
name(file)
names(df)
names(file)
runApp('Q:/R/pre_process_R')
shiny::runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp()
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
shiny::runApp('Q:/R/pre_process_R')
shiny::runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
output$delete <- renderUI({
actionButton("delete","delete columns")
})
output$delete_row <- renderUI({
pickerInput("delete_row","Select rows to delete",choices=as.numeric(rownames(data())),multiple=TRUE)
})
output$col_to_convert <- renderUI({
pickerInput("col_to_convert","Select column to convert",choices=colnames(data()))
})
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
file1 <- read.csv("Q:/R/datasets/do not use this/cwur_with_lat_lon_5.csv",header=TRUE)
file2 <- read.csv("Q:/R/datasets/do not use this/times_with_lat_lon_2.csv",header=TRUE)
View(file1)
View(file2)
which(names(file1) %in% names(file2))
df[,which(names(file1) %in% names(file2))]
which(names(file1) %in% names(file2))
a <- which(names(file1) %in% names(file2))
colnames(file1)[a]
View(file1)
View(file2)
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
getwd()
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp()
runApp('Q:/R/pre_process_R')
runApp()
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp()
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
?mltools
??mltools
gini_impurities(file1, wide=TRUE)
mltools::gini_impurities(file1, wide=TRUE)
View(file1)
mltools::gini_impurities(file1)
mltools::gini_impurities(file1, wide=TRUE)
mltools::gini_impurities(file1, wide=TRUE,with=FALSE)
file1 <- na.omit(file1)
mltools::gini_impurities(file1, wide=TRUE)
f <- read.csv("Q:/R/StudentsPerformance.csv",header=TRUE)
View(f)
mltools::gini_impurities(f, wide=TRUE)
??mltools
?with
conflicts()
mltools::gini_impurities(f, wide=TRUE,with=FALSE)
f2 <- f[,with=FALSE]
f2 <- f[,!"writing.score",with=FALSE]
f2 <- rbind(f[,!"writing.score",with=FALSE],f)
?with=FALSE
shiny::runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
?renderDataTable
runApp('Q:/R/pre_process_R')
shiny::runApp('Q:/R/pre_process_R')
shiny::runApp('Q:/R/pre_process_R')
shiny::runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
shiny::runApp('Q:/R/pre_process_R')
shiny::runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
file1[-as.numeric(1,2),]
runApp('Q:/R/pre_process_R')
file1[-as.numeric(272,273),]
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
library(GerkeLab/grkShinyThings)
## Not run:
library(shiny)
library(shinyThings)
ui <- fluidPage(
# Add the Undo/Redo buttons to the UI
undoHistoryUI("hist", back_text = "Step Backward", fwd_text = "Step Forward"),
# A simple text input element whose history we'll track
textInput("text", "Enter your text here"),
# Debugging elements for the demo
verbatimTextOutput("v"),
tags$h4("debug"),
undoHistoryUI_debug("hist")
)
server <- function(input, output, session) {
# Use undoHistory() to keep track of the value of input$text
undo_app_state <- undoHistory(
id = "hist",
value = reactive({
# Value must be a reactive, but can be any structure you want
req(!is.null(input$text))
input$text
})
)
# Use an observer to receive updates from undoHistory() and update the app.
observe({
req(!is.null(undo_app_state())) #<< Need to update app whenever not NULL
# Manually update app UI and reactive values
updateTextInput(session, "text", value = undo_app_state())
})
# Just for debugging
output$v <- renderPrint(input$text)
}
shinyApp(ui, server)
## End(Not run)
library(GerkeLab/grkShinyThings)
## Not run:
library(shiny)
library(shinyThings)
ui <- fluidPage(
# Add the Undo/Redo buttons to the UI
undoHistoryUI("hist", back_text = "Step Backward", fwd_text = "Step Forward"),
# A simple text input element whose history we'll track
textInput("text", "Enter your text here"),
# Debugging elements for the demo
verbatimTextOutput("v"),
tags$h4("debug"),
undoHistoryUI_debug("hist")
)
server <- function(input, output, session) {
# Use undoHistory() to keep track of the value of input$text
undo_app_state <- undoHistory(
id = "hist",
value = reactive({
# Value must be a reactive, but can be any structure you want
req(!is.null(input$text))
input$text
})
)
# Use an observer to receive updates from undoHistory() and update the app.
observe({
req(!is.null(undo_app_state())) #<< Need to update app whenever not NULL
# Manually update app UI and reactive values
updateTextInput(session, "text", value = undo_app_state())
})
# Just for debugging
output$v <- renderPrint(input$text)
}
shinyApp(ui, server)
## End(Not run)
ui <- fluidPage(
# Add the Undo/Redo buttons to the UI
undoHistoryUI("hist", back_text = "Step Backward", fwd_text = "Step Forward"),
# A simple text input element whose history we'll track
textInput("text", "Enter your text here"),
# Debugging elements for the demo
verbatimTextOutput("v"),
tags$h4("debug"),
undoHistoryUI_debug("hist")
)
## Not run:
library(shiny)
library(shinyThings)
ui <- fluidPage(
# Add the Undo/Redo buttons to the UI
undoHistoryUI("hist", back_text = "Step Backward", fwd_text = "Step Forward"),
# A simple text input element whose history we'll track
textInput("text", "Enter your text here"),
# Debugging elements for the demo
verbatimTextOutput("v"),
tags$h4("debug"),
undoHistoryUI_debug("hist")
)
server <- function(input, output, session) {
# Use undoHistory() to keep track of the value of input$text
undo_app_state <- undoHistory(
id = "hist",
value = reactive({
# Value must be a reactive, but can be any structure you want
req(!is.null(input$text))
input$text
})
)
# Use an observer to receive updates from undoHistory() and update the app.
observe({
req(!is.null(undo_app_state())) #<< Need to update app whenever not NULL
# Manually update app UI and reactive values
updateTextInput(session, "text", value = undo_app_state())
})
# Just for debugging
output$v <- renderPrint(input$text)
}
shinyApp(ui, server)
## End(Not run)
## Not run:
library(shiny)
library(shinyThings)
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
shiny::runApp('Q:/R/pre_process_R')
input$display_file_
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
shiny::runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp()
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
input$facet_wrap
reformulate(input$facet_wrap,.)
reformulate(get(input$facet_wrap),.)
reformulate(input$facet_wrap,".")
reformulate(input$facet_wrap,".")
exit
runApp()
runApp()
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
shiny::runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp()
runApp('Q:/R/pre_process_R')
runApp()
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp()
runApp()
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp()
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
output$horizontal_adjustment_x <- renderUI({
sliderInput("horizontal_adjustment_x","horizontal adjustment for x axis",min=0,max=1,value=1)
})
runApp('Q:/R/pre_process_R')
shiny::runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
?infoBox
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
shiny::runApp('Q:/R/pre_process_R')
shiny::runApp('Q:/R/pre_process_R')
install.packages("GGally")
runApp('Q:/R/pre_process_R')
library(datasets)
i <- iris
write.csv(i,"iris.csv")
getwd(9)
getwd()
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp()
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp()
runApp('Q:/R/pre_process_R')
runApp()
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp()
runApp('Q:/R/pre_process_R')
shiny::runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
file <- read.csv("Q:/R/iris.csv",header=TRUE)
View(file)
file[,"Species"] <- ifelse(file[,"Species"] == "setosa",1,-1)
ggplot(file,aes(x=Sepal.Length,Sepal.Width,color=Species)) + geom_point()
write.csv(file,"iris_for_SVM.csv")
runApp('Q:/R/pre_process_R')
install.packages("library(e1071)")
install.packages("e1071")
runApp('Q:/R/pre_process_R')
?svm
runApp('Q:/R/pre_process_R')
?svm
runApp('Q:/R/pre_process_R')
svm("Species ~ Sepal.Length + Sepal.Width + Petal.Length + Petal.Width",data=file,type="C-classification", kernel = "sigmoid", cost = 1)
svm(Species ~ Sepal.Length + Sepal.Width + Petal.Length + Petal.Width,data=file,type="C-classification", kernel = "sigmoid", cost = 1)
svm("Species ~ Sepal.Length + Sepal.Width + Petal.Length + Petal.Width",data=file,type="C-classification", kernel = "sigmoid", cost = 1)
runApp('Q:/R/pre_process_R')
