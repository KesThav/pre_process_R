runApp()
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
shiny::runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp()
runApp('Q:/R/pre_process_R')
runApp()
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp()
runApp()
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp()
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
output$horizontal_adjustment_x <- renderUI({
sliderInput("horizontal_adjustment_x","horizontal adjustment for x axis",min=0,max=1,value=1)
})
runApp('Q:/R/pre_process_R')
shiny::runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
?infoBox
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
shiny::runApp('Q:/R/pre_process_R')
shiny::runApp('Q:/R/pre_process_R')
install.packages("GGally")
runApp('Q:/R/pre_process_R')
library(datasets)
i <- iris
write.csv(i,"iris.csv")
getwd(9)
getwd()
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp()
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp()
runApp('Q:/R/pre_process_R')
runApp()
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp()
runApp('Q:/R/pre_process_R')
## Not run:
library(shiny)
## Not run:
library(shiny)
library(shinyThings)
# ui <- fluidPage(
#   # Add the Undo/Redo buttons to the UI
#   undoHistoryUI("hist", back_text = "Step Backward", fwd_text = "Step Forward"),
#
#   # A simple text input element whose history we'll track
#   textInput("text", "Enter your text here"),
#
#   # Debugging elements for the demo
#   verbatimTextOutput("v"),
#   tags$h4("debug"),
#   undoHistoryUI_debug("hist")
# )
#
# server <- function(input, output, session) {
#   # Use undoHistory() to keep track of the value of input$text
#   undo_app_state <- undoHistory(
#     id = "hist",
#     value = reactive({
#       # Value must be a reactive, but can be any structure you want
#       req(!is.null(input$text))
#       input$text
#     })
#   )
#
#   # Use an observer to receive updates from undoHistory() and update the app.
#   observe({
#     req(!is.null(undo_app_state())) #<< Need to update app whenever not NULL
#
#     # Manually update app UI and reactive values
#     updateTextInput(session, "text", value = undo_app_state())
#   })
#
#   # Just for debugging
#   output$v <- renderPrint(input$text)
# }
# shinyApp(ui, server)
## End(Not run)
## Only run this example in interactive R sessions
if (interactive()) {
# Define UI
ui <- fluidPage(
actionButton("add", "Add UI")
)
# Server logic
server <- function(input, output, session) {
observeEvent(input$add, {
insertUI(
selector = "#add",
where = "afterEnd",
ui = textInput(paste0("txt", input$add),
"Insert some text")
)
})
}
# Complete app with UI and server components
shinyApp(ui, server)
}
if (interactive()) {
# Define UI
ui <- fluidPage(
actionButton("rmv", "Remove UI"),
textInput("txt", "This is no longer useful")
)
# Server logic
server <- function(input, output, session) {
observeEvent(input$rmv, {
removeUI(
selector = "div:has(> #txt)"
)
})
}
# Complete app with UI and server components
shinyApp(ui, server)
}
## Not run:
library(shiny)
library(shinyThings)
# ui <- fluidPage(
#   # Add the Undo/Redo buttons to the UI
#   undoHistoryUI("hist", back_text = "Step Backward", fwd_text = "Step Forward"),
#
#   # A simple text input element whose history we'll track
#   textInput("text", "Enter your text here"),
#
#   # Debugging elements for the demo
#   verbatimTextOutput("v"),
#   tags$h4("debug"),
#   undoHistoryUI_debug("hist")
# )
#
# server <- function(input, output, session) {
#   # Use undoHistory() to keep track of the value of input$text
#   undo_app_state <- undoHistory(
#     id = "hist",
#     value = reactive({
#       # Value must be a reactive, but can be any structure you want
#       req(!is.null(input$text))
#       input$text
#     })
#   )
#
#   # Use an observer to receive updates from undoHistory() and update the app.
#   observe({
#     req(!is.null(undo_app_state())) #<< Need to update app whenever not NULL
#
#     # Manually update app UI and reactive values
#     updateTextInput(session, "text", value = undo_app_state())
#   })
#
#   # Just for debugging
#   output$v <- renderPrint(input$text)
# }
# shinyApp(ui, server)
## End(Not run)
## Only run this example in interactive R sessions
if (interactive()) {
# Define UI
ui <- fluidPage(
actionButton("add", "Add UI")
)
# Server logic
server <- function(input, output, session) {
observeEvent(input$add, {
insertUI(
selector = "#add",
where = "afterEnd",
ui = textInput(paste0("txt", input$add),
"Insert some text")
)
})
}
# Complete app with UI and server components
shinyApp(ui, server)
}
if (interactive()) {
# Define UI
ui <- fluidPage(
actionButton("rmv", "Remove UI"),
textInput("txt", "This is no longer useful")
)
# Server logic
server <- function(input, output, session) {
observeEvent(input$rmv, {
removeUI(
selector = "div:has(> #txt)"
)
})
}
# Complete app with UI and server components
shinyApp(ui, server)
}
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
?hr
shiny::runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
if (interactive()) {
# Define UI
ui <- fluidPage(
actionButton("add", "Add UI")
)
# Server logic
server <- function(input, output, session) {
observeEvent(input$add, {
insertUI(
selector = "#add",
where = "afterEnd",
ui = textInput(paste0("txt", input$add),
"Insert some text")
)
})
}
# Complete app with UI and server components
shinyApp(ui, server)
}
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp()
runApp('Q:/R/pre_process_R')
?insertUI
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp()
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp()
runApp('Q:/R/pre_process_R')
library(caret)
View(file1)
View(f)
runApp('Q:/R/pre_process_R')
file_caret <- read.csv("Q:/R/iris_for_SVM.csv",header=TRUE)
View(file_caret)
?caret
??caret
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp()
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp()
runApp('Q:/R/pre_process_R')
runApp()
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
fitControl <- trainControl(method="repeatedcv",number=10,repeats=10)
View(fitControl)
View(file_caret)
train <- train(Species ~ Sepal.Length + Sepal.Width,data=file_caret,method="lm",trControl=fitControl)
train <- train(Species ~ Sepal.Length + Sepal.Width,data=file_caret,method="svmLinear3",trControl=fitControl)
train <- train(Species ~ Sepal.Length + Sepal.Width,data=file_caret,method="svmLinear3",trControl=fitControl)
train <- train(Species ~ Sepal.Length + Sepal.Width,data=file_caret,method="svmLinear3",trControl=fitControl)
warnings()
train <- train(Species ~ Sepal.Length + Sepal.Width,data=file_caret,method="svmLinear",trControl=fitControl)
train <- train(Species ~ Sepal.Length + Sepal.Width,data=file_caret,method="svmLinear",trControl=fitControl)
train <- train(Species ~ Sepal.Length + Sepal.Width,data=file_caret,method="svmLinear",trControl=fitControl)
runApp('Q:/R/pre_process_R')
file_caret <- read.csv("Q:/R/iris_svm.csv",header=TRUE)
runApp('Q:/R/pre_process_R')
file_caret <- read.csv("Q:/R/iris_svm.csv",header=TRUE)
train <- train(Species ~ Sepal.Length + Sepal.Width,data=file_caret,method="svmLinear",trControl=fitControl)
View(file_caret)
str(file_caret)
file_caret$Species <- as.factor(file_caret$Species)
str(file_caret)
train <- train(Species ~ Sepal.Length + Sepal.Width,data=file_caret,method="svmLinear",trControl=fitControl)
train
runApp('Q:/R/pre_process_R')
df <- data.frame(response = sample(0:1, 200, replace=TRUE),
predictor = rnorm(200,10,45))
View(df)
runApp('Q:/R/pre_process_R')
shiny::runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp()
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp()
runApp('Q:/R/pre_process_R')
runApp()
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
shiny::runApp('Q:/R/pre_process_R')
df <- data.frame(response = sample(0:1, 200, replace=TRUE),
df <- data.frame(response = sample(0:1, 200, replace=TRUE)
df <- data.frame(response = sample(0:1, 200, replace=TRUE)
df <- data.frame(response = sample(0:1, 200, replace=TRUE))
View(df)
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
shiny::runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
conflicts()
data_to_plot <- result %>% dplyr::group_by(get(input$select_y)) %>% count()
rsconnect::setAccountInfo(name='kassis',
token='579B2F598D971695212BA7F727C1FAE6',
secret='OxLfNkxiW6OlPbvwywiCSuyvH/dOpB5XLZZb/x1I')
yrsconnect::deployApp('Q:/R/pre_process_R')
rsconnect::setAccountInfo(name='kassis',
token='579B2F598D971695212BA7F727C1FAE6',
secret='OxLfNkxiW6OlPbvwywiCSuyvH/dOpB5XLZZb/x1I')
rsconnect::deployApp('Q:/R/pre_process_R')
library(rsconnect)
rsconnect::setAccountInfo(name='kassis',
token='579B2F598D971695212BA7F727C1FAE6',
secret='OxLfNkxiW6OlPbvwywiCSuyvH/dOpB5XLZZb/x1I')
rsconnect::deployApp('Q:/R/pre_process_R')
rsconnect::setAccountInfo(name='kassis',
token='579B2F598D971695212BA7F727C1FAE6',
secret='OxLfNkxiW6OlPbvwywiCSuyvH/dOpB5XLZZb/x1I')
rsconnect::deployApp('Q:/R/pre_process_R')
rsconnect::setAccountInfo(name='kassis',
token='579B2F598D971695212BA7F727C1FAE6',
secret='OxLfNkxiW6OlPbvwywiCSuyvH/dOpB5XLZZb/x1I')
rsconnect::deployApp('Q:/R/pre_process_R')
rsconnect::setAccountInfo(name='kassis',
token='579B2F598D971695212BA7F727C1FAE6',
secret='OxLfNkxiW6OlPbvwywiCSuyvH/dOpB5XLZZb/x1I')
rsconnect::deployApp('Q:/R/pre_process_R')
rsconnect::deployApp('Q:/R/pre_process_R')
rsconnect::deployApp('Q:/R/pre_process_R')
rsconnect::setAccountInfo(name='kassis',
token='579B2F598D971695212BA7F727C1FAE6',
secret='OxLfNkxiW6OlPbvwywiCSuyvH/dOpB5XLZZb/x1I')
rsconnect::deployApp('Q:/R/pre_process_R')
shiny::runApp('Q:/R/pre_process_R')
rsconnect::deployApp('Q:/R/pre_process_R')
rsconnect::deployApp('Q:/R/pre_process_R')
rsconnect::setAccountInfo(name='kassis',
token='579B2F598D971695212BA7F727C1FAE6',
secret='OxLfNkxiW6OlPbvwywiCSuyvH/dOpB5XLZZb/x1I')
rsconnect::deployApp('Q:/R/pre_process_R')
rsconnect::deployApp('Q:/R/pre_process_R')
rsconnect::setAccountInfo(name='kassis',
token='579B2F598D971695212BA7F727C1FAE6',
secret='OxLfNkxiW6OlPbvwywiCSuyvH/dOpB5XLZZb/x1I')
rsconnect::deployApp('Q:/R/pre_process_R')
rsconnect::deployApp('Q:/R/pre_process_R')
rsconnect::setAccountInfo(name='kassis',
token='73DF1EBE6859836DC1F7FEF1D3F5B88B',
secret='OxLfNkxiW6OlPbvwywiCSuyvH/dOpB5XLZZb/x1I')
rsconnect::setAccountInfo(name='kassis',
token='73DF1EBE6859836DC1F7FEF1D3F5B88B',
secret='OxLfNkxiW6OlPbvwywiCSuyvH/dOpB5XLZZb/x1I')
rsconnect::setAccountInfo(name='kassis',
token='73DF1EBE6859836DC1F7FEF1D3F5B88B',
secret='T43LVBO/i6OBjiOYY7oTV/zYukZIXPthF6Bw1Bu+')
rsconnect::deployApp('Q:/R/pre_process_R')
rsconnect::setAccountInfo(name='kassis',
token='73DF1EBE6859836DC1F7FEF1D3F5B88B',
secret='T43LVBO/i6OBjiOYY7oTV/zYukZIXPthF6Bw1Bu+')
rsconnect::deployApp('Q:/R/pre_process_R')
rsconnect::deployApp('Q:/R/pre_process_R')
rsconnect::setAccountInfo(name='kassis',
token='73DF1EBE6859836DC1F7FEF1D3F5B88B',
secret='T43LVBO/i6OBjiOYY7oTV/zYukZIXPthF6Bw1Bu+')
rsconnect::deployApp('Q:/R/pre_process_R')
rsconnect::setAccountInfo(name='kassis',
token='579B2F598D971695212BA7F727C1FAE6',
secret='OxLfNkxiW6OlPbvwywiCSuyvH/dOpB5XLZZb/x1I')
rsconnect::deployApp('Q:/R/pre_process_R')
rsconnect::setAccountInfo(name='kassis',
token='579B2F598D971695212BA7F727C1FAE6',
secret='OxLfNkxiW6OlPbvwywiCSuyvH/dOpB5XLZZb/x1I')
rsconnect::deployApp('Q:/R/pre_process_R')
search()
rsconnect::deployApp('Q:/R/pre_process_R')
rsconnect::deployApp('Q:/R/pre_process_R')
rsconnect::deployApp('Q:/R/pre_process_R')
rsconnect::deployApp('Q:/R/pre_process_R')
shiny::runApp('Q:/R/pre_process_R')
?rf
?rf
??randomForest
library(datasets)
iris <- iris
View(iris)
str(iris)
library(caret)
train(iris[,1:4],iris$Species,method = "rf")
train <- train(iris[,1:4],iris$Species,method = "rf")
train$finalModel
plot(train$finalModel)
train <- train(iris[,1:4],iris$Species,method = "svm")
library(e1071)
train <- train(iris[,1:4],iris$Species,method = "svm")
train <- train(iris[,1:4],iris$Species,method = "svmLinear")
plot(train$finalModel)
plot(train$finalModel)
View(train)
train$finalModel
train <- train(iris[,1:4],iris$Species,method = "lm")
train <- train(iris[,1:3],iris$Petal.Width,method = "lm")
plot(train$finalModel)
shiny::runApp('Q:/R/pre_process_R')
library(randomForest)
runApp('Q:/R/pre_process_R')
file <- read.csv("Q:R/datasets/do not use this/cwurData.csv",header=TRUE)
View(file)
nrow(file)
nrow(na.omit(file))
nrow(na.omit(file[,"instititution"]))
file2 <- file
nrow(na.omit(file2))
nrow(file2)
nrow(file2[,"institution"])
nrow(file2[,"institution"])
file2[,"institution"]
completeFun <- function(data, desiredCols) {
completeVec <- complete.cases(data[, desiredCols])
return(data[completeVec, ])
}
completeFun(file2,"broad_impact")
c <- completeFun(file2,"broad_impact")
nrow(c)
file <- read.csv("Q:R/datasets/do not use this/shanghaiData.csv",header=TRUE)
file <- read.csv("Q:R/datasets/do not use this/cwur_with_lat_lon_5.csv",header=TRUE)
c <- completeFun(file2,"lon")
c <- completeFun(file,"lon")
nrow(c)
file <- read.csv("Q:R/datasets/do not use this/cwur_with_lat_lon_5.csv",header=TRUE)
nrow(file)
nrow(c)
file2 <- file
nrow(file)
d <- completeFun(file,"broad_impact")
nrow(d)
e <- completeFun(file,c("broad_impact","lon"))
nrow(e)
shiny::runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp()
runApp('Q:/R/pre_process_R')
runApp()
runApp('Q:/R/pre_process_R')
View(file)
mean(file[,"broad_impact"])
mean(file[,"broad_impact"],na.rm=TRUE)
?mean
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
