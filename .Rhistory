)
),
box(id="desc_table",width=12,
column(width=12,verbatimTextOutput("desc")
)
)
),
tabItem("analyze",h1("Analyze"))
)
)
))
library(DT)
library(dplyr)
library(shinyjs)
library(shinyWidgets)
shinyServer(function(input,output,session){
data <- reactiveVal()
listen <- reactive({list(input$file,input$na,input$start,input$delete,input$merge,input$delete_r,input$reset,input$convert_val,input$convert_type,input$col_to_convert)})
observeEvent(input$file,{
if(!is.null(input$file)){
print("yes")
req(input$file)
file <- input$file
d <- read.csv(file$datapath,header=TRUE)
rownames(d) <- NULL
data(as.data.frame(d))
}
})
observeEvent(input$reset,{
file <- input$file
d <- read.csv(file$datapath,header=TRUE)
rownames(d) <- NULL
data(as.data.frame(d))
})
observeEvent(listen(),{
tryCatch({
result <- data()
req(input$file,result)
if(!is.null(input$file) & input$start){
output$display_file <- renderTable(
if(input$na){
result <- result %>% tidyr::drop_na()
output$display_file <- renderTable({result})
output$str <- renderPrint({str(result)})
output$desc <-renderPrint({psych::describe(result)})
data(result)
}
else if(length(input$delete_col) != 0 & input$delete){
result <- as.data.frame(result[,-which(names(result) %in% input$delete_col)])
data(result)
output$display_file <- renderTable({result})
}
else if(length(input$delete_row) != 0 & input$delete_r){
for(row in input$delete_row){
result <- result[-as.integer(c(row)),]
print(row)
}
data(result)
}
else if(input$merge & input$merge_col_name != ""){
result[,input$merge_col_name] <- NA
for(name in input$merge_col){
result[,input$merge_col_name] <- paste(result[,input$merge_col_name], result[,name])
}
result <- as.data.frame(result[,-which(names(result) %in% input$merge_col)])
data(result)
output$display_file <- renderTable({result})
}else if(length(input$col_to_convert) != 0 & length(input$convert_type) != 0 & input$convert_val){
if(input$convert_type == 'interger'){
result[,input$col_to_convert] <- as.integer(result[,input$col_to_convert])
data(result)
}else if(input$convert_type == 'double'){
result[,input$col_to_convert] <- as.double(result[,input$col_to_convert])
data(result)
}else if(input$convert_type == 'char'){
result[,input$col_to_convert] <- as.character(result[,input$col_to_convert])
data(result)
}else{
data(result)
}
}else{
output$display_file <- renderTable({result})
output$str <- renderPrint({str(result)})
output$desc <-renderPrint({psych::describe(result)})
}
,extensions='Buttons',options=list(dom='Bfrtip',buttons = list('copy','pdf','csv','excel','print')))
}})
})
observeEvent(data(),{
output$na <- renderUI({
prettyCheckbox("na","Drop na")
})
output$merge_col <- renderUI({
pickerInput("merge_col",label="Select columns to merge",choices=colnames(data()), multiple=TRUE)
})
output$delete_col <- renderUI({
pickerInput("delete_col",label="Select columns to delete",choices=colnames(data()),multiple=TRUE)
})
output$merge_col_name <- renderUI({
textInput("merge_col_name","Enter merge column's name")
})
output$delete <- renderUI({
actionButton("delete","delete columns")
})
output$merge <- renderUI({
actionButton("merge","merge columns")
})
output$delete_row <- renderUI({
pickerInput("delete_row","Select rows to delete",choices=as.numeric(rownames(data())),multiple=TRUE)
})
output$delete_r <- renderUI({
actionButton("delete_r","delete rows")
})
output$col_to_convert <- renderUI({
pickerInput("col_to_convert","Select column to convert",choices=colnames(data()))
})
output$convert_type <- renderUI({
pickerInput("convert_type","Select what to convert to",choices=c('integer','double','chr'))
})
output$convert_val <- renderUI({
actionButton("convert_val","Convert")
})
})
})
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
library(DT)
library(dplyr)
library(shinyjs)
library(shinyWidgets)
shinyServer(function(input,output,session){
data <- reactiveVal()
listen <- reactive({list(input$file,input$na,input$start,input$delete,input$merge,input$delete_r,input$reset,input$convert_val,input$convert_type,input$col_to_convert)})
observeEvent(input$file,{
if(!is.null(input$file)){
print("yes")
req(input$file)
file <- input$file
d <- read.csv(file$datapath,header=TRUE)
rownames(d) <- NULL
data(as.data.frame(d))
}
})
observeEvent(input$reset,{
file <- input$file
d <- read.csv(file$datapath,header=TRUE)
rownames(d) <- NULL
data(as.data.frame(d))
})
observeEvent(listen(),{
tryCatch({
result <- data()
req(input$file,result)
if(!is.null(input$file) & input$start){
output$display_file <- DT::renderDataTable(
if(input$na){
result <- result %>% tidyr::drop_na()
output$display_file <- DT::renderDataTable({result})
output$str <- renderPrint({str(result)})
output$desc <-renderPrint({psych::describe(result)})
data(result)
}
else if(length(input$delete_col) != 0 & input$delete){
result <- as.data.frame(result[,-which(names(result) %in% input$delete_col)])
data(result)
output$display_file <- DT::renderDataTable({result})
}
else if(length(input$delete_row) != 0 & input$delete_r){
for(row in input$delete_row){
result <- result[-as.integer(c(row)),]
print(row)
}
data(result)
}
else if(input$merge & input$merge_col_name != ""){
result[,input$merge_col_name] <- NA
for(name in input$merge_col){
result[,input$merge_col_name] <- paste(result[,input$merge_col_name], result[,name])
}
result <- as.data.frame(result[,-which(names(result) %in% input$merge_col)])
data(result)
output$display_file <- DT::renderDataTable({result})
}else if(length(input$col_to_convert) != 0 & length(input$convert_type) != 0 & input$convert_val){
if(input$convert_type == 'integer'){
print(input$convert_type)
result[,input$col_to_convert] <- as.integer(result[,input$col_to_convert])
data(result)
}else if(input$convert_type == 'double'){
print(input$convert_type)
result[,input$col_to_convert] <- as.double(result[,input$col_to_convert])
data(result)
}else if(input$convert_type == 'chr'){
print(input$convert_type)
result[,input$col_to_convert] <- as.character(result[,input$col_to_convert])
data(result)
}else{
data(result)
}
}else{
output$display_file <- DT::renderDataTable({result})
output$str <- renderPrint({str(result)})
output$desc <-renderPrint({psych::describe(result)})
}
,extensions='Buttons',options=list(dom='Bfrtip',buttons = list('copy','pdf','csv','excel','print')))
}})
})
observeEvent(input$start, {
if(input$button %% 2 == 1){
shinyjs::hide(id = "notif")
}else{
shinyjs::show(id = "notif")
}
})
observeEvent(data(),{
output$na <- renderUI({
prettyCheckbox("na","Drop na")
})
output$merge_col <- renderUI({
pickerInput("merge_col",label="Select columns to merge",choices=colnames(data()), multiple=TRUE)
})
output$delete_col <- renderUI({
pickerInput("delete_col",label="Select columns to delete",choices=colnames(data()),multiple=TRUE)
})
output$merge_col_name <- renderUI({
textInput("merge_col_name","Enter merge column's name")
})
output$delete <- renderUI({
actionButton("delete","delete columns")
})
output$merge <- renderUI({
actionButton("merge","merge columns")
})
output$delete_row <- renderUI({
pickerInput("delete_row","Select rows to delete",choices=as.numeric(rownames(data())),multiple=TRUE)
})
output$delete_r <- renderUI({
actionButton("delete_r","delete rows")
})
output$col_to_convert <- renderUI({
pickerInput("col_to_convert","Select column to convert",choices=colnames(data()))
})
output$convert_type <- renderUI({
pickerInput("convert_type","Select what to convert to",choices=c('integer','double','chr'))
})
output$convert_val <- renderUI({
actionButton("convert_val","Convert")
})
})
})
library(shiny)
library(shinydashboard)
library(DT)
library(shinyjs)
shinyUI(dashboardPage(
dashboardHeader(title="Pre-process dataset without coding"),
dashboardSidebar(width = 350,
useShinyjs(),
sidebarMenu(
menuItem("Dashboard", tabName = "dashboard", icon = icon("dashboard")),
menuItem("Analyze", icon = icon("th"), tabName = "analyze",
badgeLabel = "new", badgeColor = "green")
),
fileInput("file","Upload CSV file",multiple=FALSE,accept = c("text/csv",
"text/comma-separated-values,text/plain",
".csv")),
actionButton("start","Start")
),
dashboardBody(
tabItems(
tabItem(tabName="dashboard",
fluidRow(
box(id="notif", width=12, style="backgroud: #ccff90", "Upload a file"),
box(id="menu",width=4,
tabBox(width=12,
tabPanel("Handle columns",
uiOutput("delete_col"),
uiOutput("delete"),
uiOutput("merge_col"),
uiOutput("merge_col_name"),
uiOutput("merge"),),
tabPanel("Handle rows",
uiOutput("delete_row"),
uiOutput("delete_r")),
tabPanel("Convert types",
uiOutput("col_to_convert"),
uiOutput("convert_type"),
uiOutput("convert_val")),
tabPanel("More options",
uiOutput("na"),
actionButton("reset","Reset"))
)
),
box(id="data_table",width=8,style="overflow-x : scroll",
column(width=12,
DT::dataTableOutput("display_file")
)
)
),
box(id="str_table",width=12,
column(width=12,verbatimTextOutput("str")
)
),
box(id="desc_table",width=12,
column(width=12,verbatimTextOutput("desc")
)
)
),
tabItem("analyze",h1("Analyze"))
)
)
))
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp()
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp()
runApp()
runApp('Q:/R/pre_process_R')
runApp()
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp()
runApp('Q:/R/pre_process_R')
library(DT)
library(dplyr)
library(shinyjs)
library(shinyWidgets)
jscode <- "shinyjs.refresh = function() { history.go(0); }"
shinyServer(function(input,output,session){
data <- reactiveVal()
listen <- reactive({list(input$file,input$na,input$start,input$delete,input$merge,input$delete_r,input$reset,input$convert_val,input$convert_type,input$col_to_convert)})
observeEvent(input$file,{
if(!is.null(input$file)){
print("yes")
req(input$file)
file <- input$file
d <- read.csv(file$datapath,header=TRUE)
rownames(d) <- NULL
data(as.data.frame(d))
}
})
observeEvent(input$reset,{
file <- input$file
d <- read.csv(file$datapath,header=TRUE)
rownames(d) <- NULL
data(as.data.frame(d))
})
observeEvent(listen(),{
result <- data()
req(length(input$file) > 0, length(result) > 0)
if(!is.null(input$file) & !is.null(result)){
js$refresh()
output$display_file <- DT::renderDataTable({
if(input$na){
result <- result %>% tidyr::drop_na()
output$display_file <- DT::renderDataTable({result})
output$str <- renderPrint({str(result)})
output$desc <-renderPrint({psych::describe(result)})
data(result)
}
else if(length(input$delete_col) != 0 & input$delete){
result <- as.data.frame(result[,-which(names(result) %in% input$delete_col)])
data(result)
output$display_file <- DT::renderDataTable({result})
}
else if(length(input$delete_row) != 0 & input$delete_r){
for(row in input$delete_row){
result <- result[-as.integer(c(row)),]
print(row)
}
data(result)
}
else if(input$merge & input$merge_col_name != ""){
result[,input$merge_col_name] <- NA
for(name in input$merge_col){
result[,input$merge_col_name] <- paste(result[,input$merge_col_name], result[,name])
}
result <- as.data.frame(result[,-which(names(result) %in% input$merge_col)])
data(result)
output$display_file <- DT::renderDataTable({result})
}else if(length(input$col_to_convert) != 0 & length(input$convert_type) != 0 & input$convert_val){
if(input$convert_type == 'integer'){
print(input$convert_type)
result[,input$col_to_convert] <- as.integer(result[,input$col_to_convert])
data(result)
}else if(input$convert_type == 'double'){
print(input$convert_type)
result[,input$col_to_convert] <- as.double(result[,input$col_to_convert])
data(result)
}else if(input$convert_type == 'chr'){
print(input$convert_type)
result[,input$col_to_convert] <- as.character(result[,input$col_to_convert])
data(result)
}else{
output$display_file <- DT::renderDataTable({result})
}
}else{
output$display_file <- DT::renderDataTable({result})
output$str <- renderPrint({str(result)})
output$desc <-renderPrint({psych::describe(result)})
}
})
}
})
observeEvent(data(), {
shinyjs::toggle(id="hidden")
if(length(data()) != 0){
shinyjs::hide(id = "notif")
}else{
shinyjs::show(id = "notif")
}
})
observeEvent(data(),{
output$na <- renderUI({
prettyCheckbox("na","Drop na")
})
output$merge_col <- renderUI({
pickerInput("merge_col",label="Select columns to merge",choices=colnames(data()), multiple=TRUE)
})
output$delete_col <- renderUI({
pickerInput("delete_col",label="Select columns to delete",choices=colnames(data()),multiple=TRUE)
})
output$merge_col_name <- renderUI({
textInput("merge_col_name","Enter merge column's name")
})
output$delete <- renderUI({
actionButton("delete","delete columns")
})
output$merge <- renderUI({
actionButton("merge","merge columns")
})
output$delete_row <- renderUI({
pickerInput("delete_row","Select rows to delete",choices=as.numeric(rownames(data())),multiple=TRUE)
})
output$delete_r <- renderUI({
actionButton("delete_r","delete rows")
})
output$col_to_convert <- renderUI({
pickerInput("col_to_convert","Select column to convert",choices=colnames(data()))
})
output$convert_type <- renderUI({
pickerInput("convert_type","Select what to convert to",choices=c('integer','double','chr'))
})
output$convert_val <- renderUI({
actionButton("convert_val","Convert")
})
})
})
runApp('Q:/R/pre_process_R')
runApp()
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
View(d)
unique(d)
unique(d[,"instituion"])
unique(d[,"institution"])
unique(d[,"institute_type"])
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp()
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
