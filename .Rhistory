output$display_file <- DT::renderDataTable({dataset})
output$str <- renderPrint({str(dataset)})
output$desc <-renderPrint({psych::describe(dataset)})
}
}
})
})
runApp('Q:/R/pre_process_R')
?shinyjs
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
shinyjs::useShinyjs()
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
conflicts()
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp()
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp()
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp()
runApp('Q:/R/pre_process_R')
runApp()
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
all
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp()
runApp('Q:/R/pre_process_R')
runApp()
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
?actionButton
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp()
runApp('Q:/R/pre_process_R')
runApp()
runApp()
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp()
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp()
runApp('Q:/R/pre_process_R')
runApp()
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp()
runApp()
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp()
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp()
runApp('Q:/R/pre_process_R')
runApp()
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp()
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp()
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp()
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
shiny::runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
shiny::runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp()
runApp('Q:/R/pre_process_R')
runApp()
runApp('Q:/R/pre_process_R')
runApp()
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
install.packages(c("cachem", "htmltools", "httpuv", "later", "stringi", "survival", "tibble"))
install.packages(c("cachem", "htmltools", "httpuv", "later", "stringi", "survival", "tibble"))
install.packages(c("cachem", "htmltools", "httpuv", "later", "stringi", "survival", "tibble"))
install.packages(c("cachem", "htmltools", "httpuv", "later", "stringi", "survival", "tibble"))
install.packages(c("cachem", "htmltools", "httpuv", "later", "stringi", "survival", "tibble"))
install.packages(c("cachem", "htmltools", "httpuv", "later", "stringi", "survival", "tibble"))
install.packages(c("cachem", "htmltools", "httpuv", "later", "stringi", "survival", "tibble"))
install.packages(c("cachem", "htmltools", "httpuv", "later", "stringi", "survival", "tibble"))
install.packages(c("cachem", "htmltools", "httpuv", "later", "stringi", "survival", "tibble"))
install.packages(c("cachem", "htmltools", "httpuv", "later", "stringi", "survival", "tibble"))
install.packages(c("cachem", "htmltools", "httpuv", "later", "stringi", "survival", "tibble"))
install.packages(c("cachem", "htmltools", "httpuv", "later", "stringi", "survival", "tibble"))
install.packages(c("cachem", "htmltools", "httpuv", "later", "stringi", "survival", "tibble"))
install.packages(c("cachem", "htmltools", "httpuv", "later", "stringi", "survival", "tibble"))
install.packages(c("cachem", "htmltools", "httpuv", "later", "stringi", "survival", "tibble"))
install.packages(c("cachem", "htmltools", "httpuv", "later", "stringi", "survival", "tibble"))
install.packages(c("cachem", "htmltools", "httpuv", "later", "stringi", "survival", "tibble"))
library(DT)
library(dplyr)
library(shinyjs)
library(shinyWidgets)
jscode <- "shinyjs.refresh = function() { history.go(0); }"
shinyServer(function(input,output,session){
data <- reactiveVal()
listen <- reactive({list(input$file,input$na,input$delete,input$merge,input$delete_r,input$reset,input$convert_val,input$convert_type,input$col_to_convert)})
observeEvent(input$file,{
if(!is.null(input$file)){
req(input$file)
file <- input$file
d <- read.csv(file$datapath,header=TRUE)
rownames(d) <- NULL
data(as.data.frame(d))
}
})
observeEvent(input$reset,{
file <- input$file
d <- read.csv(file$datapath,header=TRUE)
rownames(d) <- NULL
data(as.data.frame(d))
})
observeEvent(listen(),{
result <- data()
if(!is.null(input$file)){
if(input$na){
result <- result %>% tidyr::drop_na()
data(result)
}
else if(length(input$delete_col) != 0 & input$delete){
result <- as.data.frame(result[,-which(names(result) %in% input$delete_col)])
data(result)
}
else if(length(input$delete_row) != 0 & input$delete_r){
for(row in input$delete_row){
result <- result[-as.integer(c(row)),]
print(row)
}
data(result)
}
else if(input$merge & input$merge_col_name != ""){
result[,input$merge_col_name] <- NA
for(name in input$merge_col){
result[,input$merge_col_name] <- paste(result[,input$merge_col_name], result[,name])
}
result <- as.data.frame(result[,-which(names(result) %in% input$merge_col)])
data(result)
}else if(length(input$col_to_convert) != 0 & length(input$convert_type) != 0 & input$convert_val){
if(input$convert_type == 'integer'){
print(input$convert_type)
result[,input$col_to_convert] <- as.integer(result[,input$col_to_convert])
data(result)
}else if(input$convert_type == 'double'){
print(input$convert_type)
result[,input$col_to_convert] <- as.double(result[,input$col_to_convert])
data(result)
}else if(input$convert_type == 'chr'){
print(input$convert_type)
result[,input$col_to_convert] <- as.character(result[,input$col_to_convert])
data(result)
}else{
data(result)
}
}else{
data(result)
}
output$display_file <- DT::renderDataTable({result})
output$str <- renderPrint({str(result)})
output$desc <-renderPrint({psych::describe(result)})
}
},ignoreNULL=TRUE, ignoreInit=TRUE)
observeEvent(data(), {
if(length(data()) != 0){
shinyjs::hide(id = "notif")
shinyjs::show(id="hidden")
}else{
shinyjs::show(id = "notif")
shinyjs::hide(id="hidden")
}
})
observeEvent(data(),{
output$na <- renderUI({
prettyCheckbox("na","Drop na")
})
output$merge_col <- renderUI({
pickerInput("merge_col",label="Select columns to merge",choices=colnames(data()), multiple=TRUE)
})
output$delete_col <- renderUI({
pickerInput("delete_col",label="Select columns to delete",choices=colnames(data()),multiple=TRUE)
})
output$merge_col_name <- renderUI({
textInput("merge_col_name","Enter merge column's name")
})
output$delete <- renderUI({
actionButton("delete","delete columns")
})
output$merge <- renderUI({
actionButton("merge","merge columns")
})
output$delete_row <- renderUI({
pickerInput("delete_row","Select rows to delete",choices=as.numeric(rownames(data())),multiple=TRUE)
})
output$delete_r <- renderUI({
actionButton("delete_r","delete rows")
})
output$col_to_convert <- renderUI({
pickerInput("col_to_convert","Select column to convert",choices=colnames(data()))
})
output$convert_type <- renderUI({
pickerInput("convert_type","Select what to convert to",choices=c('integer','double','chr'))
})
output$convert_val <- renderUI({
actionButton("convert_val","Convert")
})
output$show_unique <- renderUI({
pickerInput("show_unique","Show unique",choices=colnames(data()),select=colnames(data())[1])
})
})
observeEvent(input$show_unique,{
result <- data()
output$unique <- renderPrint({unique(result[,input$show_unique])})
})
})
library(shiny)
library(shinydashboard)
library(DT)
library(shinyjs)
shinyUI(dashboardPage(
dashboardHeader(title="Pre-process dataset without coding"),
dashboardSidebar(width = 350,
useShinyjs(),
sidebarMenu(
menuItem("Dashboard", tabName = "dashboard", icon = icon("dashboard")),
menuItem("Analyze", icon = icon("th"), tabName = "analyze",
badgeLabel = "new", badgeColor = "green")
),
fileInput("file","Upload CSV file",multiple=FALSE,accept = c("text/csv",
"text/comma-separated-values,text/plain",
".csv"))
),
dashboardBody(
tabItems(
tabItem(tabName="dashboard",
fluidRow(
box(solidHeader = TRUE,id="notif", width=12, style="backgroud: #ccff90", h1("Upload a file")),
hidden(
div(id="hidden",
box(solidHeader = TRUE,id="menu",width=4,
tabBox(width=12,
tabPanel("Handle columns",
uiOutput("delete_col"),
uiOutput("delete"),
uiOutput("merge_col"),
uiOutput("merge_col_name"),
uiOutput("merge")),
tabPanel("Handle rows",
uiOutput("delete_row"),
uiOutput("delete_r")),
tabPanel("Convert types",
uiOutput("col_to_convert"),
uiOutput("convert_type"),
uiOutput("convert_val")),
tabPanel("More options",
uiOutput("na"),
actionButton("reset","Reset"))
)
),
box(solidHeader = TRUE,id="data_table",width=8,style="overflow-x : scroll",
column(width=12,DT::dataTableOutput("display_file"))),
box(solidHeader = TRUE,title="details",id="str_table",width=6,
column(width=12,verbatimTextOutput("str"))),
box(solidHeader = TRUE,title="describe()",id="desc_table",width=6,
column(width=12,verbatimTextOutput("desc"))),
box(solidHeader = TRUE,title="Show unique",id="unique_",width=6,
column(width=12,uiOutput("show_unique")),
column(width=12,verbatimTextOutput("unique")))
)))),
tabItem("analyze",h1("Analyze"))
)
)))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shinyServer(function(input,output,session){
#Preprocess
data <- reactiveVal()
counter <- reactiveVal()
listen <- reactive({list(counter(),input$na,input$delete,input$merge,input$delete_r,input$reset,input$convert_val,input$convert_type,input$col_to_convert)})
observeEvent(input$file,{
if(!is.null(input$file)){
req(input$file)
file <- input$file
d <- read.csv(file$datapath,header=TRUE)
rownames(d) <- NULL
data(as.data.frame(d))
}
})
observeEvent(input$reset,{
file <- input$file
d <- read.csv(file$datapath,header=TRUE)
rownames(d) <- NULL
data(as.data.frame(d))
})
observeEvent(listen(),{
tryCatch({
result <- data()
if(!is.null(input$file) & length(result) > 0){
print(input$na)
if(!is.null(input$na) & input$na){
result <- result %>% tidyr::drop_na()
data(result)
}
else if(length(input$delete_col) != 0 & input$delete){
result <- as.data.frame(result[,-which(names(result) %in% input$delete_col)])
data(result)
}
else if(length(input$delete_row) != 0 & input$delete_r){
for(row in input$delete_row){
result <- result[-as.integer(c(row)),]
print(row)
}
data(result)
}
else if(input$merge & input$merge_col_name != ""){
result[,input$merge_col_name] <- NA
for(name in input$merge_col){
result[,input$merge_col_name] <- paste(result[,input$merge_col_name], result[,name])
}
result <- as.data.frame(result[,-which(names(result) %in% input$merge_col)])
data(result)
}else if(length(input$col_to_convert) != 0 & length(input$convert_type) != 0 & input$convert_val){
if(input$convert_type == 'integer'){
print(input$convert_type)
result[,input$col_to_convert] <- as.integer(result[,input$col_to_convert])
data(result)
}else if(input$convert_type == 'double'){
print(input$convert_type)
result[,input$col_to_convert] <- as.double(result[,input$col_to_convert])
data(result)
}else if(input$convert_type == 'chr'){
print(input$convert_type)
result[,input$col_to_convert] <- as.character(result[,input$col_to_convert])
data(result)
}else{
data(result)
}
}else{
data(result)
}
output$display_file <- DT::renderDataTable({result})
output$str <- renderPrint({str(result)})
output$desc <-renderPrint({psych::describe(result)})
}},    warning = function(warn){
showNotification(paste0(warn), type = 'warning')
},
error = function(err){
showNotification(paste0(err), type = 'err')})
},ignoreNULL=TRUE, ignoreInit=TRUE)
observeEvent(data(), {
if(length(data()) != 0){
shinyjs::hide(id = "notif")
shinyjs::show(id="hidden")
}else{
shinyjs::show(id = "notif")
shinyjs::hide(id="hidden")
}
})
observeEvent(data(),{
if(length(data()) > 0){
output$na <- renderUI({
checkboxInput("na","Drop na",value = FALSE)
})
output$merge_col <- renderUI({
pickerInput("merge_col",label="Select columns to merge",choices=colnames(data()), multiple=TRUE)
})
output$delete_col <- renderUI({
pickerInput("delete_col",label="Select columns to delete",choices=colnames(data()),multiple=TRUE)
})
output$merge_col_name <- renderUI({
textInput("merge_col_name","Enter merge column's name")
})
output$delete <- renderUI({
actionButton("delete","delete columns")
})
output$merge <- renderUI({
actionButton("merge","merge columns")
})
output$delete_row <- renderUI({
pickerInput("delete_row","Select rows to delete",choices=as.numeric(rownames(data())),multiple=TRUE)
})
output$delete_r <- renderUI({
actionButton("delete_r","delete rows")
})
output$col_to_convert <- renderUI({
pickerInput("col_to_convert","Select column to convert",choices=colnames(data()))
})
output$convert_type <- renderUI({
pickerInput("convert_type","Select what to convert to",choices=c('integer','double','chr'))
})
output$convert_val <- renderUI({
actionButton("convert_val","Convert")
})
output$show_unique <- renderUI({
pickerInput("show_unique","Show unique",choices=colnames(data()),select=colnames(data())[1])
})
output$reset <- renderUI({
actionButton("reset","Reset")
})
count <- 1
counter(count)
}
})
observeEvent(input$show_unique,{
result <- data()
output$unique <- renderPrint({unique(result[,input$show_unique])})
})
##############################################################################################################################################################
##############################################################################################################################################################
##############################################################################################################################################################
#Analyze
plots <- c("scatter plot","line plot","displot","bar chart","histogram","density plot","box plot","violin plot","pie chart","correlogram","Dendrogram")
})
runApp()
runApp()
runApp()
