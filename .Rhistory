sp <- which(iris[,"Species"] == "versicolor")
ggplot(data, aes(x=Petal.Length,y=Petal.Width,color=as.factor(Species))) + geom_point()
for(i in 1:length(sp)){
iris[i,"Species"] <- "virginica"
}
for(i in 1:nrow(data)){
if(data[i,"Species"] == "versicolor"){
data[i,"cat"] <- 1
}else{
data[i,"cat"] <- -1
}
}
p <- ggplot(iris, aes(x=Petal.Length,y=Petal.Width,color=as.factor(cat))) + geom_point()
str(data)
svm.model <- train(x=data[,1:2],y=as.factor(data[,4]),method="svmLinear3")
summary(svm.model)
w <- svm.model$finalModel$W
m <- w[1]/-w[2]
q <- w[3]/-w[2]
p <- p + geom_abline(slope=0.49,intercept=-176)
p
library(caret)
library(datasets)
data <- iris[,3:5]
sp <- which(iris[,"Species"] == "versicolor")
ggplot(data, aes(x=Petal.Length,y=Petal.Width,color=as.factor(Species))) + geom_point()
for(i in 1:length(sp)){
iris[i,"Species"] <- "virginica"
}
for(i in 1:nrow(data)){
if(data[i,"Species"] == "versicolor"){
data[i,"cat"] <- 1
}else{
data[i,"cat"] <- -1
}
}
p <- ggplot(iris, aes(x=Petal.Length,y=Petal.Width,color=as.factor(cat))) + geom_point()
str(data)
svm.model <- train(x=data[,1:2],y=as.factor(data[,4]),method="svmLinear3")
summary(svm.model)
w <- svm.model$finalModel$W
m <- w[1]/-w[2]
q <- w[3]/-w[2]
p <- p + abline(slope=0.49,intercept=-176)
p
ggplot(data, aes(x=Petal.Length,y=Petal.Width,color=as.factor(Species))) + geom_point()
ggplot(data, aes(x=Petal.Length,y=Petal.Width,color=as.factor(Species))) + geom_point() + geom_abline(slope=0.49,intercept=-176)
ggplot(data, aes(x=Petal.Length,y=Petal.Width,color=as.factor(Species))) + geom_point() + geom_abline(slope=0.49,intercept=-176)
ggplot(data, aes(x=Petal.Length,y=Petal.Width,color=as.factor(Species))) + geom_point() + geom_abline(slope=2,intercept=0)
?caret
?train
names(getModelInfo())
library(caret)
library(datasets)
data <- iris[,3:5]
sp <- which(iris[,"Species"] == "versicolor")
ggplot(data, aes(x=Petal.Length,y=Petal.Width,color=as.factor(Species))) + geom_point()
for(i in 1:length(sp)){
iris[i,"Species"] <- "virginica"
}
ggplot(iris, aes(x=Petal.Length,y=Petal.Width,color=as.factor(cat))) + geom_point()
i
ggplot(iris, aes(x=Petal.Length,y=Petal.Width,color=as.factor(Species))) + geom_point()
library(caret)
library(datasets)
data <- iris[,3:5]
sp <- which(iris[,"Species"] == "versicolor")
ggplot(data, aes(x=Petal.Length,y=Petal.Width,color=as.factor(Species))) + geom_point()
sp <- data[which(iris[,"Species"] == "virginica")]
sp <- data[which(data[,"Species"] == "virginica")]
data <- iris[,3:5]
sp <- data[which(data[,"Species"] == "virginica")]
library(caret)
library(datasets)
data <- iris[,3:5]
sp <- data[which(data[,"Species"] == "virginica")]
sp <- data[which(data$Species == "virginica")]
sp <- data[which(data[,"Species"] == "virginica")]
View(data)
data[,"Species"]
data[,"Species"] == "virgina"
sp = NULL
for(i in 1:nrow(data)){
if(data[i,"Species"] == "versicolor"){
sp <- c(sp,data[,"Species"])
}
}
sp
sp = NULL
for(i in 1:nrow(data)){
if(data[i,"Species"] == "versicolor"){
sp <- c(sp,data[i,])
}
}
View(sp)
View(sp)
sp <- as.data.frame(sp)
View(sp)
data.filter <- data %>% filter(Species == "versicolor")
library(dplyr)
data <- iris[,3:5]
data.filter <- data %>% filter(Species == "versicolor")
View(data.filter)
data.filter <- data %>% filter(Species == "versicolor") | filter(Species == "setosa")
data.filter <- data %>% filter(Species == "versicolor") | filter(Species == "setosa")
data.filter <- data %>% filter(Species == "versicolor") || filter(Species == "setosa")
data.filter <- data %>% filter(Species == "versicolor")
View(data.filter)
data.filter <- data.filter + data %>%  filter(Species == "setosa")
data.filter <- c(data.filter,data %>%  filter(Species == "setosa"))
View(data.filter)
data.filter <- data %>% filter(Species == "versicolor")
data.filter <- c(data.filter, data %>%  filter(Species == "setosa"))
data.filter <- data %>% filter(Species == "versicolor")
data.filter2 <- data %>%  filter(Species == "setosa")
data2 <- data.frame(data.filter,data.filter2)
View(data2)
data2 <- rbind(data.filter,data.filter2,)
data2 <- rbind(data.filter,data.filter2)
View(data2)
ggplot(data2, aes(x=Petal.Length,y=Petal.Width,color=as.factor(Species))) + geom_point()
ggplot(data2, aes(x=Petal.Length,y=Petal.Width,color=as.factor(Species))) + geom_point()
for(i in 1:nrow(data)){
if(data2[i,"Species"] == "versicolor"){
data2[i,"cat"] <- 1
}else{
data2[i,"cat"] <- -1
}
}
p <- ggplot(iris, aes(x=Petal.Length,y=Petal.Width,color=as.factor(cat))) + geom_point()
p <- ggplot(data2, aes(x=Petal.Length,y=Petal.Width,color=as.factor(cat))) + geom_point()
str(data)
str(data2)
data2$cat <- as.factor(data2$cat)
str(data2)
View(data2)
svm.model <- train(x=data[,1:2],y=as.factor(data[,4]),method="svmLinear3")
svm.model <- train(x=data2[,1:2],y=as.factor(data2[,4]),method="svmLinear3")
summary(svm.model)
w <- svm.model$finalModel$W
m <- w[1]/-w[2]
q <- w[3]/-w[2]
p <- p + geom_abline(slope=0.49,intercept=-176)
p
svm.model <- train(x=data2[,1:2],y=as.factor(data2[,4]),method="svmLinear")
summary(svm.model)
w <- svm.model$finalModel$W
summary(svm.model)
svm.model <- train(x=data2[,1:2],y=as.factor(data2[,4]),method="svmLinear")
summary(svm.model)
View(svm.model)
?train
names(getModelInfo())
lda.model <- train(x=data2[,1:2],y=as.factor(data2[,4]),method="lda")
View(lda.model)
summary(svm.model)
predict(data2[,1:2])
predict(as.vector(data2[,1:2]))
lda.model <- train(x=data2[,1:2],y=as.factor(data2[,4]),method="lda2")
summary(lda.model)
View(lda.model)
predict(lda.model,data[,1:2])
library(caret)
library(datasets)
library(dplyr)
data <- iris[,3:5]
data.filter <- data %>% filter(Species == "versicolor")
data.filter2 <- data %>%  filter(Species == "setosa")
data2 <- rbind(data.filter,data.filter2)
ggplot(data2, aes(x=Petal.Length,y=Petal.Width,color=as.factor(Species))) + geom_point()
ggplot(data2, aes(x=Petal.Length,y=Petal.Width,color=as.factor(Species))) + geom_point()
for(i in 1:nrow(data)){
if(data2[i,"Species"] == "versicolor"){
data2[i,"cat"] <- 1
}else{
data2[i,"cat"] <- -1
}
}
p <- ggplot(data2, aes(x=Petal.Length,y=Petal.Width,color=as.factor(cat))) + geom_point()
data2$cat <- as.factor(data2$cat)
str(data2)
lda.model <- train(x=data2[,1:2],y=as.factor(data2[,4]),method="lda2")
summary(lda.model)
predict(lda.model,data[,1:2])
p
p + geom_abline(lda.model)
p
abline(lda.model)
p
par(new=TRUE)
abline(lda.model)
plot(data2$Petal.Length,data2$Petal.Width)
par(new=TRUE)
abline(lda.model)
plot(data2$Petal.Length,data2$Petal.Width)
par(new=TRUE)
abline(slope =1, intercept=0)
abline(a =1, b=0)
summary(lda.model)
summary(lda.model$finalModel)
View(data2)
model <- lda(cat ~ Petal.Length + Petal.Width, data=data2)
plot(data2$Petal.Length,data2$Petal.Width,col=data2$cat)
par(new=TRUE)
abline(a =1, b=0)
abline(lda.model)
plot(data2$Petal.Length,data2$Petal.Width,col=data2$cat)
par(new=TRUE)
abline(lda.model)
plot(data2$Petal.Length,data2$Petal.Width,col=data2$cat)
par(new=TRUE)
lines(data2[,1:2],predict(lda.model,data2[,1:2]))
lines(data2[,1:2],color=predict(lda.model,data2[,1:2]))
plot(data2[,1:2],color=predict(lda.model,data2[,1:2]))
scatter(data2[,1:2],color=predict(lda.model,data2[,1:2]))
scatterplot(data2[,1:2],color=predict(lda.model,data2[,1:2]))
library(caret)
library(datasets)
library(dplyr)
data <- iris[,3:5]
View(data)
data$Species[which(df$Species == "versicolor")] <- 1
data$Species[which(df$Species == "versicolor")] = 1
library(caret)
library(datasets)
library(dplyr)
data <- iris[,3:5]
data$Species[which(df$Species == "versicolor")] = 1
data$Species[which(data$Species == "versicolor")] = 1
library(caret)
library(datasets)
library(dplyr)
data <- iris[,3:5]
View(data)
data$Species[which(data$Species == "versicolor")] = 1
data[which(data$Species == "versicolor")] = 1
View(data)
library(caret)
library(datasets)
library(dplyr)
data <- iris[,3:5]
View(data)
data$Species[which(data$Species == "versicolor")] = 1
data$Species[data$Species == "versicolor"] = 1
data$Species[data$Species == "versicolor"] <- 1
data$fff[data$Species == "versicolor"] <- 1
View(data)
library(caret)
library(datasets)
library(dplyr)
data <- iris[,3:5]
data$fff[data$Species == "versicolor"] <- 1
View(data)
data$fff[data$fff != 1 ] <- -1
View(data)
data$fff[data$fff != 1 ] <- -1
library(caret)
library(datasets)
library(dplyr)
data <- iris[,3:5]
library(caret)
library(datasets)
library(dplyr)
data <- iris[,3:5]
data$fff[data$Species == "versicolor"] <- 1
data$fff[is.na(data$fff) ] <- -1
library(datasets)
data <- iris
View(data)
summary(data$Petal.Length)
ggplot(data, x=Petal_Length) + geom_histogram(color="darkblue")
ggplot(data, x=Petal.Length) + geom_histogram(color="darkblue")
ggplot(data, aes(x=Petal.Length)) + geom_histogram(color="darkblue")
ggplot(data, aes(x=Petal.Length)) + geom_histogram(color="darkblue")
library(ggplot2)
ggplot(data, aes(x=Petal.Length)) + geom_histogram(color="darkblue")
library(dplyr)
summary(data[data$Species == "setosa"]$Petal.Length)
summary(data[data$Species == "setosa",$Petal.Length])
summary(data[data$Species == "setosa","Petal.Length"])
stats <- data %>% #on applique des fonctions sur le dataset data
filter(Petal.Width >= 1) %>% #on filtre les Petal.Width et on retourne que ce qui ont une valeur supérieur ou égal à 1
group_by(Species) %>%
summarise(quant = quantile(Sepal.Length, .95))
stats <- data %>% #on applique des fonctions sur le dataset data
filter(Petal.Width >= 1) %>% #on filtre les Petal.Width et on retourne que ce qui ont une valeur supérieur ou égal à 1
group_by(Species) %>% #on groupe les éléments par species
summarise(quant = quantile(Sepal.Length, .95))
stats <- data %>% #on applique des fonctions sur le dataset data
filter(Petal.Width >= 1) %>% #on filtre les Petal.Width et on retourne que ce qui ont une valeur supérieur ou égal à 1
group_by(Species) %>% #on groupe les éléments par species
summarise(quant = quantile(Sepal.Length, .95))
stats
library(datasets)
data <- iris
summary(data[data$Species == "setosa","Petal.Length"])
library(ggplot2)
ggplot(data, aes(x=Petal.Length)) + geom_histogram(color="darkblue")
ggplot(data, aes(x=Petal.Length)) + geom_histogram(color=data$Species)
ggplot(data, aes(x=Petal.Length)) + geom_histogram(col=data$Species)
ggplot(data, aes(x=Petal.Length,col=Species)) + geom_histogram(col=data$Species)
ggplot(data, aes(x=Petal.Length,col=Species)) + geom_histogram(
)
ggplot(data, aes(x=Petal.Length,fill=Species)) + geom_histogram()
library(datasets)
data <- iris
summary(data[data$Species == "setosa","Petal.Length"])
library(ggplot2)
ggplot(data, aes(x=Petal.Length)) + geom_histogram(color="darkblue")
ggplot(data, aes(x=Petal.Length,fill=Species)) + geom_histogram()
library(dplyr)
stats <- data %>% #on applique des fonctions sur le dataset data
filter(Petal.Width >= 1) %>% #on filtre les Petal.Width et on retourne que ce qui ont une valeur supérieur ou égal à 1
group_by(Species) %>% #on groupe les éléments par species
summarise(quant = quantile(Sepal.Length, .95)) #on calcule le 95ème quantile de la valeur Sepal.Length et on retourne les valeurs sous forme de résumé
stats
View(stats)
View(stats)
library(datasets)
data <- iris
View(data)
summary(data[data$Species == "setosa","Petal.Length"])
View(data)
ggplot(data, aes(x=Petal.Length)) + geom_histogram(color="darkblue")
ggplot(data, aes(x=Petal.Length,fill=Species)) + geom_histogram()
library(dplyr)
stats
library(dplyr)
stats <- data %>% #on applique des fonctions sur le dataset data
filter(Petal.Width >= 1) %>% #on filtre les Petal.Width et on retourne que ce qui ont une valeur supérieur ou égal à 1
group_by(Species) %>% #on groupe les éléments par species
summarise(quant = quantile(Sepal.Length, .95)) #on calcule le 95ème quantile de la valeur Sepal.Length et on retourne les valeurs sous forme de résumé
stats
a <- v(12,23)
a <- c(12,23)
a
mdy(“April 10, 2019”)
library(datasets)
iris <- iris
iris
head(iris)
str(iris)
arrange(iris,Sepal.Length)
path = "Q:/Google Data Analytics/case study 2/"
daily.activity <- read.csv(paste(path, 'dailyActivity_merged.csv', sep=""), header=TRUE)
daily.calories <- read.csv(paste(path, 'dailyCalories_merged.csv', sep=""), header=TRUE)
daily.intensities <- read.csv(paste(path, 'dailyIntensities_merged.csv', sep=""), header=TRUE)
daily.steps <- read.csv(paste(path, 'dailySteps_merged.csv', sep=""), header=TRUE)
sleep.day <- read.csv(paste(path, 'sleepDay_merged.csv', sep=""), header=TRUE)
heartrate.seconds <- read.csv(paste(path, 'heartrate_seconds_merged.csv', sep=""), header=TRUE)
hourly.calories <- read.csv(paste(path, 'hourlyCalories_merged.csv', sep=""), header=TRUE)
hourly.intensities <- read.csv(paste(path, 'hourlyIntensities_merged.csv', sep=""), header=TRUE)
hourly.steps <- read.csv(paste(path, 'hourlySteps_merged.csv', sep=""), header=TRUE)
minute.calories.narrow <- read.csv(paste(path, 'minuteCaloriesNarrow_merged.csv', sep=""), header=TRUE)
minute.calories.wide <- read.csv(paste(path, 'minuteCaloriesWide_merged.csv', sep=""), header=TRUE)
minute.intensities.narrow <- read.csv(paste(path, 'minuteIntensitiesNarrow_merged.csv', sep=""), header=TRUE)
minute.intensities.Wide <- read.csv(paste(path, 'minuteIntensitiesWide_merged.csv', sep=""), header=TRUE)
minute.mets.narrow <- read.csv(paste(path, 'minuteMETsNarrow_merged.csv', sep=""), header=TRUE)
minute.Sleep <- read.csv(paste(path, 'minuteSleep_merged.csv', sep=""), header=TRUE)
minute.steps.narrow <- read.csv(paste(path, 'minuteStepsNarrow_merged.csv', sep=""), header=TRUE)
minute.steps.wide <- read.csv(paste(path, 'minuteStepsWide_merged.csv', sep=""), header=TRUE)
minute.steps.narrow <- read.csv(paste(path, 'minuteStepsNarrow_merged.csv', sep=""), header=TRUE)
weight.log <- read.csv(paste(path, 'weightLogInfo_merged.csv', sep=""), header=TRUE)
df1 <- merge(daily.activity,daily.calories, by=c("Id","ActivityDay"), all=TRUE)
df1
df1 <- merge(daily.activity,daily.calories, by=c("Id","ActivityDay"), all=TRUE)
df1 <- merge(daily.activity,daily.calories, by=c("Id","ActivityDate"), all=TRUE)
df1 <- merge(daily.activity,daily.calories, by=c("Id","ActivityDate"), all=TRUE)
df1
df1 <- merge(daily.activity,daily.calories, by=c("Id","ActivityDate"))
df1
View(daily.activity)
df1 <- merge(daily.activity,daily.calories, by=c("Id","ActivityDate"))
df1 <- merge(daily.activity,daily.calories, by=c("Id","ActivityDate"))
df <- daily.activity %>% full_join(daily.calories, by=c("Id","ActivityDate"))
library(dplyr)
df <- daily.activity %>% full_join(daily.calories, by=c("Id","ActivityDate"))
View(daily.activity)
View(daily.calories)
View(daily.activity)
View(daily.calories)
View(daily.activity)
View(daily.calories)
View(daily.intensities)
View(daily.steps)
library(shiny)
runApp('Q:/shiny.R')
runApp('Q:/shiny.R')
runApp('Q:/shiny.R')
runApp('Q:/shiny.R')
runApp('Q:/shiny.R')
runApp('Q:/shiny.R')
runApp('Q:/shiny.R')
runApp('Q:/shiny.R')
runApp('Q:/shiny.R')
runApp('Q:/shiny.R')
cwur <- read.csv(file="cwurData.csv",header = TRUE)
shanghai  <- read.csv(file="shanghaiData.csv",header = TRUE)
times <- read.csv(file="timesData.csv",header = TRUE)
school.country <- read.csv(file="school_and_country_table.csv",header = TRUE)
#clean school.country
school.country[,"alpha-2"] <- mapvalues(school.country[,"country"], from=c("United States of America", "Singapore", "Finland","Norway","Italy","Iran","Colombia","Uganda","United Arab Emirates","Indonesia","Ukraine","United Kingdom",
"Australia","Taiwan","Spain","Russian Federation","Portugal","Macau","Malaysia","Belarus","Jordan","Lithuania","Switzerland","China","South Africa","New Zealand",
"Greece","Thailand","Morocco","Lebanon","Serbia","Latvia","Canada","France","Turkey","Egypt","Iceland","Chile","Luxembourg","Romania","Slovakia",
"Kenya","Hong Kong","Sweden","Netherlands","Austria","Czech Republic","Estonia","Unisted States of America","Slovenia","Bangladesh","Argentina",
"Japan","Germany","Belgium","Israel","India","Saudi Arabia","Cyprus","Pakistan","Ghana","Qatar","South Korea","Republic of Ireland","Denmark",
"Brazil","Poland","Mexico","Unted Kingdom","Hungary","Nigeria","Oman"),
to=c("US", "SG", "FI","NO","IT","IR","CO","UG","AE","ID","UA","GB","AU","TW","ES","RU","PT","MO","MY","BY","JO","LT","CH","CN","ZA","NZ","GR","TH","MA","LB",
"RS","LV","CA","FR","TR","EG","IS","CL","LU","RO","SK","KE","HK","SE","NL","AT","CZ","EE","US","SI","BD","AR","JP","DE","BE","IL","IN","SA","CY",
"PK","GH","QA","KR","IE","DK","BR","PL","MX","GB","HU","NG","OM"))
school.country[,"alpha-3"] <- mapvalues(school.country[,"alpha-2"], from=c("US", "SG", "FI","NO","IT","IR","CO","UG","AE","ID","UA","GB","AU","TW","ES","RU","PT","MO","MY","BY","JO","LT","CH","CN","ZA","NZ","GR","TH","MA","LB",
"RS","LV","CA","FR","TR","EG","IS","CL","LU","RO","SK","KE","HK","SE","NL","AT","CZ","EE","US","SI","BD","AR","JP","DE","BE","IL","IN","SA","CY",
"PK","GH","QA","KR","IE","DK","BR","PL","MX","GB","HU","NG","OM"),
to=c("USA","SGP","FIN","NOR","ITA","IRN","COL","UGA","ARE","IDN","UKR","GBR","AUS","TWN","ESP","RUS","PRT","MAC","MYS","BLR","JOR","LTU","CHE","CHN","ZAF","NZL","GRC","THA","MAR",
"LBN","SRB","LV","CAN","FRA","TUR","EGY","ISL","CHL","LUX","ROU","SVK","KEN","HKG","SWE","NLD","AUT","CZE","EST","USA","SVN","BGD","ARG","JPN","DEU","BEL","ISR","IND","SAU",
"CYP","PAK","GHA","QAT","KOR","IRL","DNK","BRA","POL","MEX","GBR","HUN","NGA","OMN"))
colnames(school.country)[1] <- "institution"
#clean times
colnames(times)[2] <- "institution"
times[,"alpha-2"] <- mapvalues(times[,"country"], from=c("United States of America", "Singapore", "Finland","Norway","Italy","Iran","Colombia","Uganda","United Arab Emirates","Indonesia","Ukraine","United Kingdom",
"Australia","Taiwan","Spain","Russian Federation","Portugal","Macau","Malaysia","Belarus","Jordan","Lithuania","Switzerland","China","South Africa","New Zealand",
"Greece","Thailand","Morocco","Lebanon","Serbia","Latvia","Canada","France","Turkey","Egypt","Iceland","Chile","Luxembourg","Romania","Slovakia",
"Kenya","Hong Kong","Sweden","Netherlands","Austria","Czech Republic","Estonia","Unisted States of America","Slovenia","Bangladesh","Argentina",
"Japan","Germany","Belgium","Israel","India","Saudi Arabia","Cyprus","Pakistan","Ghana","Qatar","South Korea","Republic of Ireland","Denmark",
"Brazil","Poland","Mexico","Unted Kingdom","Hungary","Nigeria","Oman"),
to=c("US", "SG", "FI","NO","IT","IR","CO","UG","AE","ID","UA","GB","AU","TW","ES","RU","PT","MO","MY","BY","JO","LT","CH","CN","ZA","NZ","GR","TH","MA","LB",
"RS","LV","CA","FR","TR","EG","IS","CL","LU","RO","SK","KE","HK","SE","NL","AT","CZ","EE","US","SI","BD","AR","JP","DE","BE","IL","IN","SA","CY",
"PK","GH","QA","KR","IE","DK","BR","PL","MX","GB","HU","NG","OM"))
times[,"alpha-3"] <- mapvalues(times[,"alpha-2"], from=c("US", "SG", "FI","NO","IT","IR","CO","UG","AE","ID","UA","GB","AU","TW","ES","RU","PT","MO","MY","BY","JO","LT","CH","CN","ZA","NZ","GR","TH","MA","LB",
"RS","LV","CA","FR","TR","EG","IS","CL","LU","RO","SK","KE","HK","SE","NL","AT","CZ","EE","US","SI","BD","AR","JP","DE","BE","IL","IN","SA","CY",
"PK","GH","QA","KR","IE","DK","BR","PL","MX","GB","HU","NG","OM"),
to=c("USA","SGP","FIN","NOR","ITA","IRN","COL","UGA","ARE","IDN","UKR","GBR","AUS","TWN","ESP","RUS","PRT","MAC","MYS","BLR","JOR","LTU","CHE","CHN","ZAF","NZL","GRC","THA","MAR",
"LBN","SRB","LV","CAN","FRA","TUR","EGY","ISL","CHL","LUX","ROU","SVK","KEN","HKG","SWE","NLD","AUT","CZE","EST","USA","SVN","BGD","ARG","JPN","DEU","BEL","ISR","IND","SAU",
"CYP","PAK","GHA","QAT","KOR","IRL","DNK","BRA","POL","MEX","GBR","HUN","NGA","OMN"))
#clean cwur
cwur <- cwur[,-4]
cwur[,"alpha-2"] <- mapvalues(cwur[,"country"], from=c("USA", "Singapore", "Finland","Norway","Italy","Iran","Colombia","Uganda","United Arab Emirates","Indonesia","Ukraine","United Kingdom",
"Australia","Taiwan","Spain","Russian Federation","Portugal","Macau","Malaysia","Belarus","Jordan","Lithuania","Switzerland","China","South Africa","New Zealand",
"Greece","Thailand","Morocco","Lebanon","Serbia","Latvia","Canada","France","Turkey","Egypt","Iceland","Chile","Luxembourg","Romania","Slovakia",
"Kenya","Hong Kong","Sweden","Netherlands","Austria","Czech Republic","Estonia","Unisted States of America","Slovenia","Bangladesh","Argentina",
"Japan","Germany","Belgium","Israel","India","Saudi Arabia","Cyprus","Pakistan","Ghana","Qatar","South Korea","Republic of Ireland","Denmark",
"Brazil","Poland","Mexico","Unted Kingdom","Hungary","Nigeria","Oman","Bulgaria","Uruguay","Croatia","Puerto Rico","Slovak Republic","Russia","Ireland"),
to=c("US", "SG", "FI","NO","IT","IR","CO","UG","AE","ID","UA","GB","AU","TW","ES","RU","PT","MO","MY","BY","JO","LT","CH","CN","ZA","NZ","GR","TH","MA","LB",
"RS","LV","CA","FR","TR","EG","IS","CL","LU","RO","SK","KE","HK","SE","NL","AT","CZ","EE","US","SI","BD","AR","JP","DE","BE","IL","IN","SA","CY",
"PK","GH","QA","KR","IE","DK","BR","PL","MX","GB","HU","NG","OM","BG","UY","HR","PR","SK","RU","IE"))
cwur[,"alpha-3"] <- mapvalues(cwur[,"alpha-2"], from=c("US", "SG", "FI","NO","IT","IR","CO","UG","AE","ID","UA","GB","AU","TW","ES","RU","PT","MO","MY","BY","JO","LT","CH","CN","ZA","NZ","GR","TH","MA","LB",
"RS","LV","CA","FR","TR","EG","IS","CL","LU","RO","SK","KE","HK","SE","NL","AT","CZ","EE","US","SI","BD","AR","JP","DE","BE","IL","IN","SA","CY",
"PK","GH","QA","KR","IE","DK","BR","PL","MX","GB","HU","NG","OM","BG","UY","HR","PR","SK","RU","IE"),
to=c("USA","SGP","FIN","NOR","ITA","IRN","COL","UGA","ARE","IDN","UKR","GBR","AUS","TWN","ESP","RUS","PRT","MAC","MYS","BLR","JOR","LTU","CHE","CHN","ZAF","NZL","GRC","THA","MAR",
"LBN","SRB","LV","CAN","FRA","TUR","EGY","ISL","CHL","LUX","ROU","SVK","KEN","HKG","SWE","NLD","AUT","CZE","EST","USA","SVN","BGD","ARG","JPN","DEU","BEL","ISR","IND","SAU",
"CYP","PAK","GHA","QAT","KOR","IRL","DNK","BRA","POL","MEX","GBR","HUN","NGA","OMN","BGR","URY","HRV","PRI","SVK","RUS","IRL"))
#clean shanghai
shanghai <- shanghai[,-3]
colnames(shanghai)[2] <- "institution"
shanghai <- merge(shanghai,school.country,by="institution",all.x = TRUE)
iso_country <- c(AFG="AFG",XAD="XAD",ALA="ALA",ALB="ALB",DZA="DZA",ASM="ASM",AND="AND",AGO="AGO",AIA="AIA",
ATA="ATA",ATG="ATG",ARG="ARG",ARM="ARM",ABW="ABW",AUS="AUS",AUT="AUT",AZE="AZE",BHS="BHS",
BHR="BHR",BGD="BGD",BRB="BRB",BLR="BLR",BEL="BEL",BLZ="BLZ",BEN="BEN",BMU="BMU",BTN="BTN",
BOL="BOL",BES="BES",BIH="BIH",BWA="BWA",BVT="BVT",BRA="BRA",IOT="IOT",VGB="VGB",BRN="BRN",
BGR="BGR",BFA="BFA",BDI="BDI",KHM="KHM",CMR="CMR",CAN="CAN",CPV="CPV",XCA="XCA",CYM="CYM",
CAF="CAF",TCD="TCD",CHL="CHL",CHN="CHN",CXR="CXR",XCL="XCL",CCK="CCK",COL="COL",COM="COM",
COK="COK",CRI="CRI",CIV="CIV",HRV="HRV",CUB="CUB",CUW="CUW",CYP="CYP",CZE="CZE",COD="COD",
DNK="DNK",DJI="DJI",DOM="DOM",DMA="DMA",ECU="ECU",EGY="EGY",SLV="SLV",GNQ="GNQ",ERI="ERI",
EST="EST",ETH="ETH",FLK="FLK",FRO="FRO",FJI="FJI",FIN="FIN",FRA="FRA",GUF="GUF",PYF="PYF",
ATF="ATF",GAB="GAB",GMB="GMB",GEO="GEO",DEU="DEU",GHA="GHA",GIB="GIB",GRC="GRC",GRL="GRL",
GRD="GRD",GLP="GLP",GUM="GUM",GTM="GTM",GGY="GGY",GNB="GNB",GIN="GIN",GUY="GUY",HTI="HTI",
HMD="HMD",HND="HND",HKG="HKG",HUN="HUN",ISL="ISL",IND="IND",IDN="IDN",IRN="IRN",IRQ="IRQ",
IRL="IRL",IMN="IMN",ISR="ISR",ITA="ITA",JAM="JAM",JPN="JPN",JEY="JEY",JOR="JOR",KAZ="KAZ",
KEN="KEN",KIR="KIR",XKO="XKO",KWT="KWT",KGZ="KGZ",LAO="LAO",LVA="LVA",LBN="LBN",LSO="LSO",
LBR="LBR",LBY="LBY",LIE="LIE",LTU="LTU",LUX="LUX",MAC="MAC",MKD="MKD",MDG="MDG",MWI="MWI",
MYS="MYS",MDV="MDV",MLI="MLI",MLT="MLT",MHL="MHL",MTQ="MTQ",MRT="MRT",MUS="MUS",MYT="MYT",
MEX="MEX",FSM="FSM",MDA="MDA",MCO="MCO",MNG="MNG",MNE="MNE",MSR="MSR",MAR="MAR",MOZ="MOZ",
MMR="MMR",NAM="NAM",NRU="NRU",NPL="NPL",NLD="NLD",NCL="NCL",NZL="NZL",NIC="NIC",NER="NER",
NGA="NGA",NIU="NIU",NFK="NFK",PRK="PRK",XNC="XNC",MNP="MNP",NOR="NOR",OMN="OMN",PAK="PAK",
PLW="PLW",PSE="PSE",PAN="PAN",PNG="PNG",XPI="XPI",PRY="PRY",PER="PER",PHL="PHL",PCN="PCN",
POL="POL",PRT="PRT",PRI="PRI",QAT="QAT",COG="COG",REU="REU",ROU="ROU",RUS="RUS",RWA="RWA",
BLM="BLM",MAF="MAF",SHN="SHN",KNA="KNA",LCA="LCA",SPM="SPM",VCT="VCT",WSM="WSM",SMR="SMR",
STP="STP",SAU="SAU",SEN="SEN",SRB="SRB",SYC="SYC",SLE="SLE",SGP="SGP",SXM="SXM",SVK="SVK",
SVN="SVN",SLB="SLB",SOM="SOM",ZAF="ZAF",SGS="SGS",KOR="KOR",SSD="SSD",ESP="ESP",XSP="XSP",
LKA="LKA",SDN="SDN",SUR="SUR",SJM="SJM",SWZ="SWZ",SWE="SWE",CHE="CHE",SYR="SYR",TWN="TWN",
TJK="TJK",TZA="TZA",THA="THA",TLS="TLS",TGO="TGO",TKL="TKL",TON="TON",TTO="TTO",TUN="TUN",
TUR="TUR",TKM="TKM",TCA="TCA",TUV="TUV",UGA="UGA",UKR="UKR",ARE="ARE",GBR="GBR",UMI="UMI",
USA="USA",URY="URY",UZB="UZB",VUT="VUT",VAT="VAT",VEN="VEN",VNM="VNM",VIR="VIR",WLF="WLF",
ESH="ESH",YEM="YEM",ZMB="ZMB",ZWE="ZWE")
iso_country
length(iso_country)
country <- list()
for(country_code in iso_country){
country[[country_code]] <- c(country,getData("GADM",country=iso_country[country_code],level=0))
}
library(shiny)
library(leaflet)
library(dplyr)
library(geojsonio)
library(plyr)
library(tidyverse)
library(DT)
library(sp)
library(rvest)
library(stringr)
library(raster)
for(country_code in iso_country){
country[[country_code]] <- c(country,getData("GADM",country=iso_country[country_code],level=0))
}
shiny::runApp('Q:/R/World_university_ranking_shiny')
runApp('Q:/R/World_university_ranking_shiny')
runApp('Q:/R/World_university_ranking_shiny')
shiny::runApp('Q:/R/World_university_ranking_shiny')
runApp('Q:/R/World_university_ranking_shiny')
shiny::runApp('Q:/R/pre_process_R')
shiny::runApp('Q:/R/pre_process_R')
runApp('Q:/R/pre_process_R')
